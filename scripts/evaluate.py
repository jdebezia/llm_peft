import sqlite3
import time

import numpy as np
import pandas as pd


def evaluate_query(query_llm, ground_truth_query, db_con):
    """
        Evaluates the performance and correctness of a generated SQL query against a ground truth query.

        Args:
            query_llm (str): The SQL query generated by the language model.
            ground_truth_query (str): The ground truth SQL query for comparison.
            db_con (sqlite3.Connection): The database connection object.

        Returns:
            dict: A dictionary containing:
                - valid_llm_query (bool): Whether the LLM query is valid.
                - valid_llm_query_result (bool): Whether the LLM query results match the ground truth results.
                - faster_or_equal_llm_query_exec_time (bool): Whether the LLM query execution time is faster or equal to the ground truth query execution time.
        """
    is_faster = False
    is_valid, results_llm, execution_time_llmm = run_db_and_get_results(query_llm, db_con)
    if results_llm is None:
        return {"valid_llm_query": False, "valid_llm_query_result": False,
                "faster_or_equal_llm_query_exec_time": False}
    is_valid, results_gt, execution_time_gt = run_db_and_get_results(ground_truth_query, db_con)
    is_same_result = compare_query_results(results_llm, results_gt)
    if is_same_result:
        is_faster = bool(execution_time_llmm <= execution_time_gt)
    return {"valid_llm_query": is_valid, "valid_llm_query_result": is_same_result,
            "faster_or_equal_llm_query_exec_time": is_faster}


def run_db_and_get_results(query, db_con: sqlite3.Connection):
    try:
        results, execution_time = exec_query_n_times_and_get_avg_time(query, db_con)
        is_valid = True
    except pd.io.sql.DatabaseError:
        return False, None,None
    return is_valid, results, execution_time


def exec_query_n_times_and_get_avg_time(query, db_con: sqlite3.Connection, n=2):
    avg_execution_time = 0
    for i in range(n):
        start_time = time.time()
        results = pd.read_sql_query(query, db_con)
        end_time = time.time()
        avg_execution_time += (end_time - start_time) * 100
    return results, np.round(avg_execution_time / n, 1)


def compare_query_results(results_llm: pd.DataFrame, ground_truth_results: pd.DataFrame):
    if results_llm is None:
        return False
    else:
        return results_llm.equals(ground_truth_results)


if __name__ == "__main__":
    dbfile = '../sqlite/atis-db.sqlite'
    con = sqlite3.connect(dbfile)
    evaluate_query("SELECT * FROM aircraft LIMIT 1", "SELECT * FROM aircraft LIMIT 1", con)
    evaluate_query("SELECT * FRM aircraft LIMIT 1", "SELECT * FROM aircraft LIMIT 1", con)
    evaluate_query("SELECT * FROM aircraft LIMIT 1", "SELECT * FROM aircraft LIMIT 2", con)
